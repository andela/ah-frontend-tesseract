// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PasswordResetForms  renders password reset forms without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PasswordResetForm
    handleRequestReset={[Function]}
    msg={
      Object {
        "message": " An Email has been sent",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2
          className="blue-grey-text center subheader"
        >
          Enter your new password
        </h2>,
        <div
          className="row"
        >
          <form
            className="col s8 m7 l6 offset-s2 offset-m3 offset-l3"
            noValidate={true}
            onSubmit={[Function]}
          >
            <div
              className="input-field"
            >
              <i
                className="material-icons prefix"
              >
                lock
              </i>
              <input
                className="validate"
                id="password"
                minLength={8}
                name="password"
                onChange={[Function]}
                pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                placeholder="new password"
                required={true}
                type="password"
                value=""
              />
              <label
                htmlFor="password"
              >
                Enter your new password
              </label>
              <div
                className="invalid-feedback"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
            </div>
            <div
              className="input-field"
            >
              <i
                className="material-icons prefix"
              >
                lock
              </i>
              <input
                className="validate"
                id="comfirmPassword"
                minLength={8}
                name="confirmPassword"
                onChange={[Function]}
                pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                placeholder="comfirm new password"
                required={true}
                type="password"
                value=""
              />
              <label
                htmlFor="comfirmPassword"
              >
                Comfirm your new password
              </label>
              <div
                className="invalid-feedback"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
            </div>
            <ResetButton
              handleSubmit={[Function]}
            />
          </form>
        </div>,
        <p
          style={
            Object {
              "color": "green",
            }
          }
        >
           An Email has been sent
        </p>,
      ],
      "className": "container z-depth-2",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Enter your new password",
          "className": "blue-grey-text center subheader",
        },
        "ref": null,
        "rendered": "Enter your new password",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <form
            className="col s8 m7 l6 offset-s2 offset-m3 offset-l3"
            noValidate={true}
            onSubmit={[Function]}
          >
            <div
              className="input-field"
            >
              <i
                className="material-icons prefix"
              >
                lock
              </i>
              <input
                className="validate"
                id="password"
                minLength={8}
                name="password"
                onChange={[Function]}
                pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                placeholder="new password"
                required={true}
                type="password"
                value=""
              />
              <label
                htmlFor="password"
              >
                Enter your new password
              </label>
              <div
                className="invalid-feedback"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
            </div>
            <div
              className="input-field"
            >
              <i
                className="material-icons prefix"
              >
                lock
              </i>
              <input
                className="validate"
                id="comfirmPassword"
                minLength={8}
                name="confirmPassword"
                onChange={[Function]}
                pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                placeholder="comfirm new password"
                required={true}
                type="password"
                value=""
              />
              <label
                htmlFor="comfirmPassword"
              >
                Comfirm your new password
              </label>
              <div
                className="invalid-feedback"
                style={
                  Object {
                    "color": "red",
                  }
                }
              />
            </div>
            <ResetButton
              handleSubmit={[Function]}
            />
          </form>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="input-field"
              >
                <i
                  className="material-icons prefix"
                >
                  lock
                </i>
                <input
                  className="validate"
                  id="password"
                  minLength={8}
                  name="password"
                  onChange={[Function]}
                  pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                  placeholder="new password"
                  required={true}
                  type="password"
                  value=""
                />
                <label
                  htmlFor="password"
                >
                  Enter your new password
                </label>
                <div
                  className="invalid-feedback"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
              </div>,
              <div
                className="input-field"
              >
                <i
                  className="material-icons prefix"
                >
                  lock
                </i>
                <input
                  className="validate"
                  id="comfirmPassword"
                  minLength={8}
                  name="confirmPassword"
                  onChange={[Function]}
                  pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                  placeholder="comfirm new password"
                  required={true}
                  type="password"
                  value=""
                />
                <label
                  htmlFor="comfirmPassword"
                >
                  Comfirm your new password
                </label>
                <div
                  className="invalid-feedback"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
              </div>,
              <ResetButton
                handleSubmit={[Function]}
              />,
            ],
            "className": "col s8 m7 l6 offset-s2 offset-m3 offset-l3",
            "noValidate": true,
            "onSubmit": [Function],
          },
          "ref": [Function],
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <i
                    className="material-icons prefix"
                  >
                    lock
                  </i>,
                  <input
                    className="validate"
                    id="password"
                    minLength={8}
                    name="password"
                    onChange={[Function]}
                    pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                    placeholder="new password"
                    required={true}
                    type="password"
                    value=""
                  />,
                  <label
                    htmlFor="password"
                  >
                    Enter your new password
                  </label>,
                  <div
                    className="invalid-feedback"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />,
                ],
                "className": "input-field",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "lock",
                    "className": "material-icons prefix",
                  },
                  "ref": null,
                  "rendered": "lock",
                  "type": "i",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "validate",
                    "id": "password",
                    "minLength": 8,
                    "name": "password",
                    "onChange": [Function],
                    "pattern": "(?=.*\\\\d)(?=.*[a-z]).{8,}",
                    "placeholder": "new password",
                    "required": true,
                    "type": "password",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Enter your new password",
                    "htmlFor": "password",
                  },
                  "ref": null,
                  "rendered": "Enter your new password",
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "invalid-feedback",
                    "style": Object {
                      "color": "red",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <i
                    className="material-icons prefix"
                  >
                    lock
                  </i>,
                  <input
                    className="validate"
                    id="comfirmPassword"
                    minLength={8}
                    name="confirmPassword"
                    onChange={[Function]}
                    pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                    placeholder="comfirm new password"
                    required={true}
                    type="password"
                    value=""
                  />,
                  <label
                    htmlFor="comfirmPassword"
                  >
                    Comfirm your new password
                  </label>,
                  <div
                    className="invalid-feedback"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />,
                ],
                "className": "input-field",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "lock",
                    "className": "material-icons prefix",
                  },
                  "ref": null,
                  "rendered": "lock",
                  "type": "i",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "validate",
                    "id": "comfirmPassword",
                    "minLength": 8,
                    "name": "confirmPassword",
                    "onChange": [Function],
                    "pattern": "(?=.*\\\\d)(?=.*[a-z]).{8,}",
                    "placeholder": "comfirm new password",
                    "required": true,
                    "type": "password",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Comfirm your new password",
                    "htmlFor": "comfirmPassword",
                  },
                  "ref": null,
                  "rendered": "Comfirm your new password",
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "invalid-feedback",
                    "style": Object {
                      "color": "red",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "handleSubmit": [Function],
                "processing": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "form",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": " An Email has been sent",
          "style": Object {
            "color": "green",
          },
        },
        "ref": null,
        "rendered": " An Email has been sent",
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2
            className="blue-grey-text center subheader"
          >
            Enter your new password
          </h2>,
          <div
            className="row"
          >
            <form
              className="col s8 m7 l6 offset-s2 offset-m3 offset-l3"
              noValidate={true}
              onSubmit={[Function]}
            >
              <div
                className="input-field"
              >
                <i
                  className="material-icons prefix"
                >
                  lock
                </i>
                <input
                  className="validate"
                  id="password"
                  minLength={8}
                  name="password"
                  onChange={[Function]}
                  pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                  placeholder="new password"
                  required={true}
                  type="password"
                  value=""
                />
                <label
                  htmlFor="password"
                >
                  Enter your new password
                </label>
                <div
                  className="invalid-feedback"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
              </div>
              <div
                className="input-field"
              >
                <i
                  className="material-icons prefix"
                >
                  lock
                </i>
                <input
                  className="validate"
                  id="comfirmPassword"
                  minLength={8}
                  name="confirmPassword"
                  onChange={[Function]}
                  pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                  placeholder="comfirm new password"
                  required={true}
                  type="password"
                  value=""
                />
                <label
                  htmlFor="comfirmPassword"
                >
                  Comfirm your new password
                </label>
                <div
                  className="invalid-feedback"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
              </div>
              <ResetButton
                handleSubmit={[Function]}
              />
            </form>
          </div>,
          <p
            style={
              Object {
                "color": "green",
              }
            }
          >
             An Email has been sent
          </p>,
        ],
        "className": "container z-depth-2",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Enter your new password",
            "className": "blue-grey-text center subheader",
          },
          "ref": null,
          "rendered": "Enter your new password",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <form
              className="col s8 m7 l6 offset-s2 offset-m3 offset-l3"
              noValidate={true}
              onSubmit={[Function]}
            >
              <div
                className="input-field"
              >
                <i
                  className="material-icons prefix"
                >
                  lock
                </i>
                <input
                  className="validate"
                  id="password"
                  minLength={8}
                  name="password"
                  onChange={[Function]}
                  pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                  placeholder="new password"
                  required={true}
                  type="password"
                  value=""
                />
                <label
                  htmlFor="password"
                >
                  Enter your new password
                </label>
                <div
                  className="invalid-feedback"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
              </div>
              <div
                className="input-field"
              >
                <i
                  className="material-icons prefix"
                >
                  lock
                </i>
                <input
                  className="validate"
                  id="comfirmPassword"
                  minLength={8}
                  name="confirmPassword"
                  onChange={[Function]}
                  pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                  placeholder="comfirm new password"
                  required={true}
                  type="password"
                  value=""
                />
                <label
                  htmlFor="comfirmPassword"
                >
                  Comfirm your new password
                </label>
                <div
                  className="invalid-feedback"
                  style={
                    Object {
                      "color": "red",
                    }
                  }
                />
              </div>
              <ResetButton
                handleSubmit={[Function]}
              />
            </form>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="input-field"
                >
                  <i
                    className="material-icons prefix"
                  >
                    lock
                  </i>
                  <input
                    className="validate"
                    id="password"
                    minLength={8}
                    name="password"
                    onChange={[Function]}
                    pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                    placeholder="new password"
                    required={true}
                    type="password"
                    value=""
                  />
                  <label
                    htmlFor="password"
                  >
                    Enter your new password
                  </label>
                  <div
                    className="invalid-feedback"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />
                </div>,
                <div
                  className="input-field"
                >
                  <i
                    className="material-icons prefix"
                  >
                    lock
                  </i>
                  <input
                    className="validate"
                    id="comfirmPassword"
                    minLength={8}
                    name="confirmPassword"
                    onChange={[Function]}
                    pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                    placeholder="comfirm new password"
                    required={true}
                    type="password"
                    value=""
                  />
                  <label
                    htmlFor="comfirmPassword"
                  >
                    Comfirm your new password
                  </label>
                  <div
                    className="invalid-feedback"
                    style={
                      Object {
                        "color": "red",
                      }
                    }
                  />
                </div>,
                <ResetButton
                  handleSubmit={[Function]}
                />,
              ],
              "className": "col s8 m7 l6 offset-s2 offset-m3 offset-l3",
              "noValidate": true,
              "onSubmit": [Function],
            },
            "ref": [Function],
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <i
                      className="material-icons prefix"
                    >
                      lock
                    </i>,
                    <input
                      className="validate"
                      id="password"
                      minLength={8}
                      name="password"
                      onChange={[Function]}
                      pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                      placeholder="new password"
                      required={true}
                      type="password"
                      value=""
                    />,
                    <label
                      htmlFor="password"
                    >
                      Enter your new password
                    </label>,
                    <div
                      className="invalid-feedback"
                      style={
                        Object {
                          "color": "red",
                        }
                      }
                    />,
                  ],
                  "className": "input-field",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "lock",
                      "className": "material-icons prefix",
                    },
                    "ref": null,
                    "rendered": "lock",
                    "type": "i",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "validate",
                      "id": "password",
                      "minLength": 8,
                      "name": "password",
                      "onChange": [Function],
                      "pattern": "(?=.*\\\\d)(?=.*[a-z]).{8,}",
                      "placeholder": "new password",
                      "required": true,
                      "type": "password",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Enter your new password",
                      "htmlFor": "password",
                    },
                    "ref": null,
                    "rendered": "Enter your new password",
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "invalid-feedback",
                      "style": Object {
                        "color": "red",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <i
                      className="material-icons prefix"
                    >
                      lock
                    </i>,
                    <input
                      className="validate"
                      id="comfirmPassword"
                      minLength={8}
                      name="confirmPassword"
                      onChange={[Function]}
                      pattern="(?=.*\\\\d)(?=.*[a-z]).{8,}"
                      placeholder="comfirm new password"
                      required={true}
                      type="password"
                      value=""
                    />,
                    <label
                      htmlFor="comfirmPassword"
                    >
                      Comfirm your new password
                    </label>,
                    <div
                      className="invalid-feedback"
                      style={
                        Object {
                          "color": "red",
                        }
                      }
                    />,
                  ],
                  "className": "input-field",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "lock",
                      "className": "material-icons prefix",
                    },
                    "ref": null,
                    "rendered": "lock",
                    "type": "i",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "validate",
                      "id": "comfirmPassword",
                      "minLength": 8,
                      "name": "confirmPassword",
                      "onChange": [Function],
                      "pattern": "(?=.*\\\\d)(?=.*[a-z]).{8,}",
                      "placeholder": "comfirm new password",
                      "required": true,
                      "type": "password",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Comfirm your new password",
                      "htmlFor": "comfirmPassword",
                    },
                    "ref": null,
                    "rendered": "Comfirm your new password",
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "invalid-feedback",
                      "style": Object {
                        "color": "red",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "handleSubmit": [Function],
                  "processing": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "form",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": " An Email has been sent",
            "style": Object {
              "color": "green",
            },
          },
          "ref": null,
          "rendered": " An Email has been sent",
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
